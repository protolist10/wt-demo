var Pr=Object.defineProperty;var kr=(e,t,s)=>t in e?Pr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var v=(e,t,s)=>kr(e,typeof t!="symbol"?t+"":t,s);import{e as Ie,g as Gr}from"./react-But5b_vu.js";function V(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?"Node.js/".concat(process.version.substr(1)," (").concat(process.platform,"; ").concat(process.arch,")"):"<environment undetectable>"}function ce(e,t,s,o){if(typeof s!="function")throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(t)?t.reverse().reduce((n,u)=>ce.bind(null,e,u,n,o),s)():Promise.resolve().then(()=>e.registry[t]?e.registry[t].reduce((n,u)=>u.hook.bind(null,n,o),s)():s(o))}function Or(e,t,s,o){const n=o;e.registry[s]||(e.registry[s]=[]),t==="before"&&(o=(u,p)=>Promise.resolve().then(n.bind(null,p)).then(u.bind(null,p))),t==="after"&&(o=(u,p)=>{let g;return Promise.resolve().then(u.bind(null,p)).then(E=>(g=E,n(g,p))).then(()=>g)}),t==="error"&&(o=(u,p)=>Promise.resolve().then(u.bind(null,p)).catch(g=>n(g,p))),e.registry[s].push({hook:o,orig:n})}function Rr(e,t,s){if(!e.registry[t])return;const o=e.registry[t].map(n=>n.orig).indexOf(s);o!==-1&&e.registry[t].splice(o,1)}const je=Function.bind,qe=je.bind(je);function ze(e,t,s){const o=qe(Rr,null).apply(null,s?[t,s]:[t]);e.api={remove:o},e.remove=o,["before","error","after","wrap"].forEach(n=>{const u=s?[t,n,s]:[t,n];e[n]=e.api[n]=qe(Or,null).apply(null,u)})}function Ar(){const e=Symbol("Singular"),t={registry:{}},s=ce.bind(null,t,e);return ze(s,t,e),s}function Sr(){const e={registry:{}},t=ce.bind(null,e);return ze(t,e),t}const Fr={Singular:Ar,Collection:Sr};var Ur="0.0.0-development",Dr="octokit-endpoint.js/".concat(Ur," ").concat(V()),Cr={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Dr},mediaType:{format:""}};function Lr(e){return e?Object.keys(e).reduce((t,s)=>(t[s.toLowerCase()]=e[s],t),{}):{}}function Ir(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const t=Object.getPrototypeOf(e);if(t===null)return!0;const s=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof s=="function"&&s instanceof s&&Function.prototype.call(s)===Function.prototype.call(e)}function Ke(e,t){const s=Object.assign({},e);return Object.keys(t).forEach(o=>{Ir(t[o])?o in e?s[o]=Ke(e[o],t[o]):Object.assign(s,{[o]:t[o]}):Object.assign(s,{[o]:t[o]})}),s}function $e(e){for(const t in e)e[t]===void 0&&delete e[t];return e}function ne(e,t,s){var n;if(typeof t=="string"){let[u,p]=t.split(" ");s=Object.assign(p?{method:u,url:p}:{url:u},s)}else s=Object.assign({},t);s.headers=Lr(s.headers),$e(s),$e(s.headers);const o=Ke(e||{},s);return s.url==="/graphql"&&(e&&((n=e.mediaType.previews)!=null&&n.length)&&(o.mediaType.previews=e.mediaType.previews.filter(u=>!o.mediaType.previews.includes(u)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(u=>u.replace(/-preview/,""))),o}function jr(e,t){const s=/\?/.test(e)?"&":"?",o=Object.keys(t);return o.length===0?e:e+s+o.map(n=>n==="q"?"q="+t.q.split("+").map(encodeURIComponent).join("+"):"".concat(n,"=").concat(encodeURIComponent(t[n]))).join("&")}var qr=/\{[^}]+\}/g;function $r(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function xr(e){const t=e.match(qr);return t?t.map($r).reduce((s,o)=>s.concat(o),[]):[]}function xe(e,t){const s={__proto__:null};for(const o of Object.keys(e))t.indexOf(o)===-1&&(s[o]=e[o]);return s}function Qe(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t).replace(/%5B/g,"[").replace(/%5D/g,"]")),t}).join("")}function I(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function B(e,t,s){return t=e==="+"||e==="#"?Qe(t):I(t),s?I(s)+"="+t:t}function L(e){return e!=null}function re(e){return e===";"||e==="&"||e==="?"}function Br(e,t,s,o){var n=e[s],u=[];if(L(n)&&n!=="")if(typeof n=="string"||typeof n=="number"||typeof n=="boolean")n=n.toString(),o&&o!=="*"&&(n=n.substring(0,parseInt(o,10))),u.push(B(t,n,re(t)?s:""));else if(o==="*")Array.isArray(n)?n.filter(L).forEach(function(p){u.push(B(t,p,re(t)?s:""))}):Object.keys(n).forEach(function(p){L(n[p])&&u.push(B(t,n[p],p))});else{const p=[];Array.isArray(n)?n.filter(L).forEach(function(g){p.push(B(t,g))}):Object.keys(n).forEach(function(g){L(n[g])&&(p.push(I(g)),p.push(B(t,n[g].toString())))}),re(t)?u.push(I(s)+"="+p.join(",")):p.length!==0&&u.push(p.join(","))}else t===";"?L(n)&&u.push(I(s)):n===""&&(t==="&"||t==="?")?u.push(I(s)+"="):n===""&&u.push("");return u}function Wr(e){return{expand:Hr.bind(null,e)}}function Hr(e,t){var s=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(o,n,u){if(n){let g="";const E=[];if(s.indexOf(n.charAt(0))!==-1&&(g=n.charAt(0),n=n.substr(1)),n.split(/,/g).forEach(function(T){var _=/([^:\*]*)(?::(\d+)|(\*))?/.exec(T);E.push(Br(t,g,_[1],_[2]||_[3]))}),g&&g!=="+"){var p=",";return g==="?"?p="&":g!=="#"&&(p=g),(E.length!==0?g:"")+E.join(p)}else return E.join(",")}else return Qe(u)}),e==="/"?e:e.replace(/\/$/,"")}function Je(e){var _;let t=e.method.toUpperCase(),s=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),n,u=xe(e,["method","baseUrl","url","headers","request","mediaType"]);const p=xr(s);s=Wr(s).expand(u),/^http/.test(s)||(s=e.baseUrl+s);const g=Object.keys(e).filter(f=>p.includes(f)).concat("baseUrl"),E=xe(u,g);if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(f=>f.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,"application/vnd$1$2.".concat(e.mediaType.format))).join(",")),s.endsWith("/graphql")&&(_=e.mediaType.previews)!=null&&_.length)){const f=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=f.concat(e.mediaType.previews).map(S=>{const G=e.mediaType.format?".".concat(e.mediaType.format):"+json";return"application/vnd.github.".concat(S,"-preview").concat(G)}).join(",")}return["GET","HEAD"].includes(t)?s=jr(s,E):"data"in E?n=E.data:Object.keys(E).length&&(n=E),!o["content-type"]&&typeof n<"u"&&(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&typeof n>"u"&&(n=""),Object.assign({method:t,url:s,headers:o},typeof n<"u"?{body:n}:null,e.request?{request:e.request}:null)}function Vr(e,t,s){return Je(ne(e,t,s))}function Ye(e,t){const s=ne(e,t),o=Vr.bind(null,s);return Object.assign(o,{DEFAULTS:s,defaults:Ye.bind(null,s),merge:ne.bind(null,s),parse:Je})}var Nr=Ye(null,Cr);class W extends Error{constructor(s,o,n){super(s);v(this,"name");v(this,"status");v(this,"request");v(this,"response");this.name="HttpError",this.status=Number.parseInt(o),Number.isNaN(this.status)&&(this.status=0),"response"in n&&(this.response=n.response);const u=Object.assign({},n.request);n.request.headers.authorization&&(u.headers=Object.assign({},n.request.headers,{authorization:n.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),u.url=u.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=u}}var Mr="0.0.0-development",zr={headers:{"user-agent":"octokit-request.js/".concat(Mr," ").concat(V())}};function Kr(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const t=Object.getPrototypeOf(e);if(t===null)return!0;const s=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof s=="function"&&s instanceof s&&Function.prototype.call(s)===Function.prototype.call(e)}async function Be(e){var f,S,G,U,O;const t=((f=e.request)==null?void 0:f.fetch)||globalThis.fetch;if(!t)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const s=((S=e.request)==null?void 0:S.log)||console,o=((G=e.request)==null?void 0:G.parseSuccessResponseBody)!==!1,n=Kr(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,u=Object.fromEntries(Object.entries(e.headers).map(([w,y])=>[w,String(y)]));let p;try{p=await t(e.url,{method:e.method,body:n,redirect:(U=e.request)==null?void 0:U.redirect,headers:u,signal:(O=e.request)==null?void 0:O.signal,...e.body&&{duplex:"half"}})}catch(w){let y="Unknown Error";if(w instanceof Error){if(w.name==="AbortError")throw w.status=500,w;y=w.message,w.name==="TypeError"&&"cause"in w&&(w.cause instanceof Error?y=w.cause.message:typeof w.cause=="string"&&(y=w.cause))}const R=new W(y,500,{request:e});throw R.cause=w,R}const g=p.status,E=p.url,T={};for(const[w,y]of p.headers)T[w]=y;const _={url:E,status:g,headers:T,data:""};if("deprecation"in T){const w=T.link&&T.link.match(/<([^>]+)>; rel="deprecation"/),y=w&&w.pop();s.warn('[@octokit/request] "'.concat(e.method," ").concat(e.url,'" is deprecated. It is scheduled to be removed on ').concat(T.sunset).concat(y?". See ".concat(y):""))}if(g===204||g===205)return _;if(e.method==="HEAD"){if(g<400)return _;throw new W(p.statusText,g,{response:_,request:e})}if(g===304)throw _.data=await te(p),new W("Not modified",g,{response:_,request:e});if(g>=400)throw _.data=await te(p),new W(Qr(_.data),g,{response:_,request:e});return _.data=o?await te(p):p.body,_}async function te(e){const t=e.headers.get("content-type");return/application\/json/.test(t)?e.json().catch(()=>e.text()).catch(()=>""):!t||/^text\/|charset=utf-8$/.test(t)?e.text():e.arrayBuffer()}function Qr(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const t="documentation_url"in e?" - ".concat(e.documentation_url):"";return Array.isArray(e.errors)?"".concat(e.message,": ").concat(e.errors.map(s=>JSON.stringify(s)).join(", ")).concat(t):"".concat(e.message).concat(t)}return"Unknown error: ".concat(JSON.stringify(e))}function ie(e,t){const s=e.defaults(t);return Object.assign(function(n,u){const p=s.merge(n,u);if(!p.request||!p.request.hook)return Be(s.parse(p));const g=(E,T)=>Be(s.parse(s.merge(E,T)));return Object.assign(g,{endpoint:s,defaults:ie.bind(null,s)}),p.request.hook(g,p)},{endpoint:s,defaults:ie.bind(null,s)})}var ae=ie(Nr,zr),Jr="0.0.0-development";function Yr(e){return"Request failed due to following response errors:\n"+e.errors.map(t=>" - ".concat(t.message)).join("\n")}var Xr=class extends Error{constructor(t,s,o){super(Yr(o));v(this,"name","GraphqlResponseError");v(this,"errors");v(this,"data");this.request=t,this.headers=s,this.response=o,this.errors=o.errors,this.data=o.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Zr=["method","baseUrl","url","headers","request","query","mediaType"],et=["query","method","url"],We=/\/api\/v3\/?$/;function rt(e,t,s){if(s){if(typeof t=="string"&&"query"in s)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const p in s)if(et.includes(p))return Promise.reject(new Error('[@octokit/graphql] "'.concat(p,'" cannot be used as variable name')))}const o=typeof t=="string"?Object.assign({query:t},s):t,n=Object.keys(o).reduce((p,g)=>Zr.includes(g)?(p[g]=o[g],p):(p.variables||(p.variables={}),p.variables[g]=o[g],p),{}),u=o.baseUrl||e.endpoint.DEFAULTS.baseUrl;return We.test(u)&&(n.url=u.replace(We,"/api/graphql")),e(n).then(p=>{if(p.data.errors){const g={};for(const E of Object.keys(p.headers))g[E]=p.headers[E];throw new Xr(n,g,p.data)}return p.data.data})}function ue(e,t){const s=e.defaults(t);return Object.assign((n,u)=>rt(s,n,u),{defaults:ue.bind(null,s),endpoint:s.endpoint})}ue(ae,{headers:{"user-agent":"octokit-graphql.js/".concat(Jr," ").concat(V())},method:"POST",url:"/graphql"});function tt(e){return ue(e,{method:"POST",url:"/graphql"})}var st=/^v1\./,ot=/^ghs_/,nt=/^ghu_/;async function it(e){const t=e.split(/\./).length===3,s=st.test(e)||ot.test(e),o=nt.test(e);return{type:"token",token:e,tokenType:t?"app":s?"installation":o?"user-to-server":"oauth"}}function at(e){return e.split(/\./).length===3?"bearer ".concat(e):"token ".concat(e)}async function ct(e,t,s,o){const n=t.endpoint.merge(s,o);return n.headers.authorization=at(e),t(n)}var ut=function(t){if(!t)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof t!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return t=t.replace(/^(token|bearer) +/i,""),Object.assign(it.bind(null,t),{hook:ct.bind(null,t)})};const Xe="6.1.2",He=()=>{},lt=console.warn.bind(console),pt=console.error.bind(console),Ve="octokit-core.js/".concat(Xe," ").concat(V());var Q;let Ze=(Q=class{constructor(t={}){v(this,"request");v(this,"graphql");v(this,"log");v(this,"hook");v(this,"auth");const s=new Fr.Collection,o={baseUrl:ae.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},t.request,{hook:s.bind(null,"request")}),mediaType:{previews:[],format:""}};if(o.headers["user-agent"]=t.userAgent?"".concat(t.userAgent," ").concat(Ve):Ve,t.baseUrl&&(o.baseUrl=t.baseUrl),t.previews&&(o.mediaType.previews=t.previews),t.timeZone&&(o.headers["time-zone"]=t.timeZone),this.request=ae.defaults(o),this.graphql=tt(this.request).defaults(o),this.log=Object.assign({debug:He,info:He,warn:lt,error:pt},t.log),this.hook=s,t.authStrategy){const{authStrategy:u,...p}=t,g=u(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:p},t.auth));s.wrap("request",g.hook),this.auth=g}else if(!t.auth)this.auth=async()=>({type:"unauthenticated"});else{const u=ut(t.auth);s.wrap("request",u.hook),this.auth=u}const n=this.constructor;for(let u=0;u<n.plugins.length;++u)Object.assign(this,n.plugins[u](this,t))}static defaults(t){return class extends this{constructor(...o){const n=o[0]||{};if(typeof t=="function"){super(t(n));return}super(Object.assign({},t,n,n.userAgent&&t.userAgent?{userAgent:"".concat(n.userAgent," ").concat(t.userAgent)}:null))}}}static plugin(...t){var n;const s=this.plugins;return n=class extends this{},v(n,"plugins",s.concat(t.filter(u=>!s.includes(u)))),n}},v(Q,"VERSION",Xe),v(Q,"plugins",[]),Q);var dt="0.0.0-development";function gt(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const s=e.data.incomplete_results,o=e.data.repository_selection,n=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const u=Object.keys(e.data)[0],p=e.data[u];return e.data=p,typeof s<"u"&&(e.data.incomplete_results=s),typeof o<"u"&&(e.data.repository_selection=o),e.data.total_count=n,e}function le(e,t,s){const o=typeof t=="function"?t.endpoint(s):e.request.endpoint(t,s),n=typeof t=="function"?t:e.request,u=o.method,p=o.headers;let g=o.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!g)return{done:!0};try{const E=await n({method:u,url:g,headers:p}),T=gt(E);return g=((T.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:T}}catch(E){if(E.status!==409)throw E;return g="",{value:{status:200,headers:{},data:[]}}}}})}}function er(e,t,s,o){return typeof s=="function"&&(o=s,s=void 0),rr(e,[],le(e,t,s)[Symbol.asyncIterator](),o)}function rr(e,t,s,o){return s.next().then(n=>{if(n.done)return t;let u=!1;function p(){u=!0}return t=t.concat(o?o(n.value,p):n.value.data),u?t:rr(e,t,s,o)})}Object.assign(er,{iterator:le});function tr(e){return{paginate:Object.assign(er.bind(null,e),{iterator:le.bind(null,e)})}}tr.VERSION=dt;var mt=(e,t)=>'The cursor at "'.concat(e.join(","),'" did not change its value "').concat(t,'" after a page transition. Please make sure your that your query is set up correctly.'),ht=class extends Error{constructor(t,s){super(mt(t.pathInQuery,s));v(this,"name","MissingCursorChangeError");this.pageInfo=t,this.cursorValue=s,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Et=class extends Error{constructor(t){super("No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ".concat(JSON.stringify(t,null,2)));v(this,"name","MissingPageInfo");this.response=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},_t=e=>Object.prototype.toString.call(e)==="[object Object]";function sr(e){const t=or(e,"pageInfo");if(t.length===0)throw new Et(e);return t}var or=(e,t,s=[])=>{for(const o of Object.keys(e)){const n=[...s,o],u=e[o];if(_t(u)){if(u.hasOwnProperty(t))return n;const p=or(u,t,n);if(p.length>0)return p}}return[]},H=(e,t)=>t.reduce((s,o)=>s[o],e),se=(e,t,s)=>{const o=t[t.length-1],n=[...t].slice(0,-1),u=H(e,n);typeof s=="function"?u[o]=s(u[o]):u[o]=s},Tt=e=>{const t=sr(e);return{pathInQuery:t,pageInfo:H(e,[...t,"pageInfo"])}},nr=e=>e.hasOwnProperty("hasNextPage"),ft=e=>nr(e)?e.endCursor:e.startCursor,bt=e=>nr(e)?e.hasNextPage:e.hasPreviousPage,ir=e=>(t,s={})=>{let o=!0,n={...s};return{[Symbol.asyncIterator]:()=>({async next(){if(!o)return{done:!0,value:{}};const u=await e.graphql(t,n),p=Tt(u),g=ft(p.pageInfo);if(o=bt(p.pageInfo),o&&g===n.cursor)throw new ht(p,g);return n={...n,cursor:g},{done:!1,value:u}}})}},wt=(e,t)=>{if(Object.keys(e).length===0)return Object.assign(e,t);const s=sr(e),o=[...s,"nodes"],n=H(t,o);n&&se(e,o,E=>[...E,...n]);const u=[...s,"edges"],p=H(t,u);p&&se(e,u,E=>[...E,...p]);const g=[...s,"pageInfo"];return se(e,g,H(t,g)),e},vt=e=>{const t=ir(e);return async(s,o={})=>{let n={};for await(const u of t(s,o))n=wt(n,u);return n}};function yt(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(vt(e),{iterator:ir(e)})})}}const Pt="13.2.6",kt={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var Gt=kt;const D=new Map;for(const[e,t]of Object.entries(Gt))for(const[s,o]of Object.entries(t)){const[n,u,p]=o,[g,E]=n.split(/ /),T=Object.assign({method:g,url:E},u);D.has(e)||D.set(e,new Map),D.get(e).set(s,{scope:e,methodName:s,endpointDefaults:T,decorations:p})}const Ot={has({scope:e},t){return D.get(e).has(t)},getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,t,s){return Object.defineProperty(e.cache,t,s),!0},deleteProperty(e,t){return delete e.cache[t],!0},ownKeys({scope:e}){return[...D.get(e).keys()]},set(e,t,s){return e.cache[t]=s},get({octokit:e,scope:t,cache:s},o){if(s[o])return s[o];const n=D.get(t).get(o);if(!n)return;const{endpointDefaults:u,decorations:p}=n;return p?s[o]=At(e,t,o,u,p):s[o]=e.request.defaults(u),s[o]}};function Rt(e){const t={};for(const s of D.keys())t[s]=new Proxy({octokit:e,scope:s,cache:{}},Ot);return t}function At(e,t,s,o,n){const u=e.request.defaults(o);function p(...g){let E=u.endpoint.merge(...g);if(n.mapToData)return E=Object.assign({},E,{data:E[n.mapToData],[n.mapToData]:void 0}),u(E);if(n.renamed){const[T,_]=n.renamed;e.log.warn("octokit.".concat(t,".").concat(s,"() has been renamed to octokit.").concat(T,".").concat(_,"()"))}if(n.deprecated&&e.log.warn(n.deprecated),n.renamedParameters){const T=u.endpoint.merge(...g);for(const[_,f]of Object.entries(n.renamedParameters))_ in T&&(e.log.warn('"'.concat(_,'" parameter is deprecated for "octokit.').concat(t,".").concat(s,'()". Use "').concat(f,'" instead')),f in T||(T[f]=T[_]),delete T[_]);return u(T)}return u(...g)}return Object.assign(p,u)}function ar(e){return{rest:Rt(e)}}ar.VERSION=Pt;var J={exports:{}},St=J.exports,Ne;function Ft(){return Ne||(Ne=1,function(e,t){(function(s,o){e.exports=o()})(St,function(){var s=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof Ie<"u"?Ie:typeof self<"u"?self:{};function o(h){return h&&h.default||h}var n=function(h,i,r={}){var a,c,l;for(a in i)l=i[a],r[a]=(c=h[a])!=null?c:l;return r},u=function(h,i,r={}){var a,c;for(a in h)c=h[a],i[a]!==void 0&&(r[a]=c);return r},p={load:n,overwrite:u},g;g=class{constructor(i,r){this.incr=i,this.decr=r,this._first=null,this._last=null,this.length=0}push(i){var r;this.length++,typeof this.incr=="function"&&this.incr(),r={value:i,prev:this._last,next:null},this._last!=null?(this._last.next=r,this._last=r):this._first=this._last=r}shift(){var i;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),i=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,i}first(){if(this._first!=null)return this._first.value}getArray(){var i,r,a;for(i=this._first,a=[];i!=null;)a.push((r=i,i=i.next,r.value));return a}forEachShift(i){var r;for(r=this.shift();r!=null;)i(r),r=this.shift()}debug(){var i,r,a,c,l;for(i=this._first,l=[];i!=null;)l.push((r=i,i=i.next,{value:r.value,prev:(a=r.prev)!=null?a.value:void 0,next:(c=r.next)!=null?c.value:void 0}));return l}};var E=g,T;T=class{constructor(i){if(this.instance=i,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(r,a)=>this._addListener(r,"many",a),this.instance.once=(r,a)=>this._addListener(r,"once",a),this.instance.removeAllListeners=(r=null)=>r!=null?delete this._events[r]:this._events={}}_addListener(i,r,a){var c;return(c=this._events)[i]==null&&(c[i]=[]),this._events[i].push({cb:a,status:r}),this.instance}listenerCount(i){return this._events[i]!=null?this._events[i].length:0}async trigger(i,...r){var a,c;try{return i!=="debug"&&this.trigger("debug","Event triggered: ".concat(i),r),this._events[i]==null?void 0:(this._events[i]=this._events[i].filter(function(l){return l.status!=="none"}),c=this._events[i].map(async l=>{var d,m;if(l.status!=="none"){l.status==="once"&&(l.status="none");try{return m=typeof l.cb=="function"?l.cb(...r):void 0,typeof(m!=null?m.then:void 0)=="function"?await m:m}catch(b){return d=b,this.trigger("error",d),null}}}),(await Promise.all(c)).find(function(l){return l!=null}))}catch(l){return a=l,this.trigger("error",a),null}}};var _=T,f,S,G;f=E,S=_,G=class{constructor(i){this.Events=new S(this),this._length=0,this._lists=(function(){var r,a,c;for(c=[],r=1,a=i;1<=a?r<=a:r>=a;1<=a?++r:--r)c.push(new f(()=>this.incr(),()=>this.decr()));return c}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(i){return this._lists[i.options.priority].push(i)}queued(i){return i!=null?this._lists[i].length:this._length}shiftAll(i){return this._lists.forEach(function(r){return r.forEachShift(i)})}getFirst(i=this._lists){var r,a,c;for(r=0,a=i.length;r<a;r++)if(c=i[r],c.length>0)return c;return[]}shiftLastFrom(i){return this.getFirst(this._lists.slice(i).reverse()).shift()}};var U=G,O;O=class extends Error{};var w=O,y,R,N,q,$;q=10,R=5,$=p,y=w,N=class{constructor(i,r,a,c,l,d,m,b){this.task=i,this.args=r,this.rejectOnDrop=l,this.Events=d,this._states=m,this.Promise=b,this.options=$.load(a,c),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===c.id&&(this.options.id="".concat(this.options.id,"-").concat(this._randomIndex())),this.promise=new this.Promise((P,k)=>{this._resolve=P,this._reject=k}),this.retryCount=0}_sanitizePriority(i){var r;return r=~~i!==i?R:i,r<0?0:r>q-1?q-1:r}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:i,message:r="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(i!=null?i:new y(r)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(i){var r;if(r=this._states.jobStatus(this.options.id),!(r===i||i==="DONE"&&r===null))throw new y("Invalid job status ".concat(r,", expected ").concat(i,". Please open an issue at https://github.com/SGrondin/bottleneck/issues"))}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(i,r){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:i,blocked:r})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(i,r,a,c){var l,d,m;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),d={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",d);try{if(m=await(i!=null?i.schedule(this.options,this.task,...this.args):this.task(...this.args)),r())return this.doDone(d),await c(this.options,d),this._assertStatus("DONE"),this._resolve(m)}catch(b){return l=b,this._onFailure(l,d,r,a,c)}}doExpire(i,r,a){var c,l;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),l={args:this.args,options:this.options,retryCount:this.retryCount},c=new y("This job timed out after ".concat(this.options.expiration," ms.")),this._onFailure(c,l,i,r,a)}async _onFailure(i,r,a,c,l){var d,m;if(a())return d=await this.Events.trigger("failed",i,r),d!=null?(m=~~d,this.Events.trigger("retry","Retrying ".concat(this.options.id," after ").concat(m," ms"),r),this.retryCount++,c(m)):(this.doDone(r),await l(this.options,r),this._assertStatus("DONE"),this._reject(i))}doDone(i){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",i)}};var M=N,F,C,z;z=p,F=w,C=class{constructor(i,r,a){this.instance=i,this.storeOptions=r,this.clientId=this.instance._randomIndex(),z.load(a,a,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var i;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(i=this.heartbeat=setInterval(()=>{var r,a,c,l,d;if(l=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&l>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=l,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&l>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:r,reservoirIncreaseMaximum:c,reservoir:d}=this.storeOptions,this._lastReservoirIncrease=l,a=c!=null?Math.min(r,c-d):r,a>0))return this.storeOptions.reservoir+=a,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?i.unref():void 0:clearInterval(this.heartbeat)}async __publish__(i){return await this.yieldLoop(),this.instance.Events.trigger("message",i.toString())}async __disconnect__(i){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(i=0){return new this.Promise(function(r,a){return setTimeout(r,i)})}computePenalty(){var i;return(i=this.storeOptions.penalty)!=null?i:15*this.storeOptions.minTime||5e3}async __updateSettings__(i){return await this.yieldLoop(),z.overwrite(i,i,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(i){return await this.yieldLoop(),this._nextRequest+this.timeout<i}computeCapacity(){var i,r;return{maxConcurrent:i,reservoir:r}=this.storeOptions,i!=null&&r!=null?Math.min(i-this._running,r):i!=null?i-this._running:r!=null?r:null}conditionsCheck(i){var r;return r=this.computeCapacity(),r==null||i<=r}async __incrementReservoir__(i){var r;return await this.yieldLoop(),r=this.storeOptions.reservoir+=i,this.instance._drainAll(this.computeCapacity()),r}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(i){return this._unblockTime>=i}check(i,r){return this.conditionsCheck(i)&&this._nextRequest-r<=0}async __check__(i){var r;return await this.yieldLoop(),r=Date.now(),this.check(i,r)}async __register__(i,r,a){var c,l;return await this.yieldLoop(),c=Date.now(),this.conditionsCheck(r)?(this._running+=r,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=r),l=Math.max(this._nextRequest-c,0),this._nextRequest=c+l+this.storeOptions.minTime,{success:!0,wait:l,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(i,r){var a,c,l;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&r>this.storeOptions.maxConcurrent)throw new F("Impossible to add a job having a weight of ".concat(r," to a limiter having a maxConcurrent setting of ").concat(this.storeOptions.maxConcurrent));return c=Date.now(),l=this.storeOptions.highWater!=null&&i===this.storeOptions.highWater&&!this.check(r,c),a=this.strategyIsBlock()&&(l||this.isBlocked(c)),a&&(this._unblockTime=c+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:l,blocked:a,strategy:this.storeOptions.strategy}}async __free__(i,r){return await this.yieldLoop(),this._running-=r,this._done+=r,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var dr=C,de,ge;de=w,ge=class{constructor(i){this.status=i,this._jobs={},this.counts=this.status.map(function(){return 0})}next(i){var r,a;if(r=this._jobs[i],a=r+1,r!=null&&a<this.status.length)return this.counts[r]--,this.counts[a]++,this._jobs[i]++;if(r!=null)return this.counts[r]--,delete this._jobs[i]}start(i){var r;return r=0,this._jobs[i]=r,this.counts[r]++}remove(i){var r;return r=this._jobs[i],r!=null&&(this.counts[r]--,delete this._jobs[i]),r!=null}jobStatus(i){var r;return(r=this.status[this._jobs[i]])!=null?r:null}statusJobs(i){var r,a,c,l,d;if(i!=null){if(a=this.status.indexOf(i),a<0)throw new de("status must be one of ".concat(this.status.join(", ")));c=this._jobs,l=[];for(r in c)d=c[r],d===a&&l.push(r);return l}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((i,r,a)=>(i[this.status[a]]=r,i),{})}};var gr=ge,me,he;me=E,he=class{constructor(i,r){this.schedule=this.schedule.bind(this),this.name=i,this.Promise=r,this._running=0,this._queue=new me}isEmpty(){return this._queue.length===0}async _tryToRun(){var i,r,a,c,l,d,m;if(this._running<1&&this._queue.length>0)return this._running++,{task:m,args:i,resolve:l,reject:c}=this._queue.shift(),r=await async function(){try{return d=await m(...i),function(){return l(d)}}catch(b){return a=b,function(){return c(a)}}}(),this._running--,this._tryToRun(),r()}schedule(i,...r){var a,c,l;return l=c=null,a=new this.Promise(function(d,m){return l=d,c=m}),this._queue.push({task:i,args:r,resolve:l,reject:c}),this._tryToRun(),a}};var mr=he,Ee="2.19.5",hr={version:Ee},Er=Object.freeze({version:Ee,default:hr}),_e=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Te=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),_r=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),fe,be,we,ve,ye,K;K=p,fe=_,ve=_e,we=Te,ye=_r,be=(function(){class h{constructor(r={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=r,K.load(this.limiterOptions,this.defaults,this),this.Events=new fe(this),this.instances={},this.Bottleneck=Ce,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new ve(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new we(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(r=""){var a;return(a=this.instances[r])!=null?a:(()=>{var c;return c=this.instances[r]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:"".concat(this.id,"-").concat(r),timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",c,r),c})()}async deleteKey(r=""){var a,c;return c=this.instances[r],this.connection&&(a=await this.connection.__runCommand__(["del",...ye.allKeys("".concat(this.id,"-").concat(r))])),c!=null&&(delete this.instances[r],await c.disconnect()),c!=null||a>0}limiters(){var r,a,c,l;a=this.instances,c=[];for(r in a)l=a[r],c.push({key:r,limiter:l});return c}keys(){return Object.keys(this.instances)}async clusterKeys(){var r,a,c,l,d,m,b,P,k;if(this.connection==null)return this.Promise.resolve(this.keys());for(m=[],r=null,k="b_".concat(this.id,"-").length,a=9;r!==0;)for([P,c]=await this.connection.__runCommand__(["scan",r!=null?r:0,"match","b_".concat(this.id,"-*_settings"),"count",1e4]),r=~~P,l=0,b=c.length;l<b;l++)d=c[l],m.push(d.slice(k,-a));return m}_startAutoCleanup(){var r;return clearInterval(this.interval),typeof(r=this.interval=setInterval(async()=>{var a,c,l,d,m,b;m=Date.now(),l=this.instances,d=[];for(c in l){b=l[c];try{await b._store.__groupCheck__(m)?d.push(this.deleteKey(c)):d.push(void 0)}catch(P){a=P,d.push(b.Events.trigger("error",a))}}return d},this.timeout/2)).unref=="function"?r.unref():void 0}updateSettings(r={}){if(K.overwrite(r,this.defaults,this),K.overwrite(r,r,this.limiterOptions),r.timeout!=null)return this._startAutoCleanup()}disconnect(r=!0){var a;if(!this.sharedConnection)return(a=this.connection)!=null?a.disconnect(r):void 0}}return h.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},h}).call(s);var Tr=be,Pe,ke,Ge;Ge=p,ke=_,Pe=(function(){class h{constructor(r={}){this.options=r,Ge.load(this.options,this.defaults,this),this.Events=new ke(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((r,a)=>this._resolve=r)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(r){var a;return this._arr.push(r),a=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),a}}return h.prototype.defaults={maxTime:null,maxSize:null,Promise},h}).call(s);var fr=Pe,br=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),wr=o(Er),Oe,Re,Y,X,Ae,Z,Se,Fe,Ue,ee,A,De=[].splice;Z=10,Re=5,A=p,Se=U,X=M,Ae=dr,Fe=br,Y=_,Ue=gr,ee=mr,Oe=(function(){class h{constructor(r={},...a){var c,l;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(r,a),A.load(r,this.instanceDefaults,this),this._queues=new Se(Z),this._scheduled={},this._states=new Ue(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new Y(this),this._submitLock=new ee("submit",this.Promise),this._registerLock=new ee("register",this.Promise),l=A.load(r,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return c=A.load(r,this.redisStoreDefaults,{}),new Fe(this,l,c);if(this.datastore==="local")return c=A.load(r,this.localStoreDefaults,{}),new Ae(this,l,c);throw new h.prototype.BottleneckError("Invalid datastore type: ".concat(this.datastore))}).call(this),this._queues.on("leftzero",()=>{var d;return(d=this._store.heartbeat)!=null&&typeof d.ref=="function"?d.ref():void 0}),this._queues.on("zero",()=>{var d;return(d=this._store.heartbeat)!=null&&typeof d.unref=="function"?d.unref():void 0})}_validateOptions(r,a){if(!(r!=null&&typeof r=="object"&&a.length===0))throw new h.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return"b_".concat(this.id)}channel_client(){return"b_".concat(this.id,"_").concat(this._store.clientId)}publish(r){return this._store.__publish__(r)}disconnect(r=!0){return this._store.__disconnect__(r)}chain(r){return this._limiter=r,this}queued(r){return this._queues.queued(r)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(r){return this._states.jobStatus(r)}jobs(r){return this._states.statusJobs(r)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(r=1){return this._store.__check__(r)}_clearGlobalState(r){return this._scheduled[r]!=null?(clearTimeout(this._scheduled[r].expiration),delete this._scheduled[r],!0):!1}async _free(r,a,c,l){var d,m;try{if({running:m}=await this._store.__free__(r,c.weight),this.Events.trigger("debug","Freed ".concat(c.id),l),m===0&&this.empty())return this.Events.trigger("idle")}catch(b){return d=b,this.Events.trigger("error",d)}}_run(r,a,c){var l,d,m;return a.doRun(),l=this._clearGlobalState.bind(this,r),m=this._run.bind(this,r,a),d=this._free.bind(this,r,a),this._scheduled[r]={timeout:setTimeout(()=>a.doExecute(this._limiter,l,m,d),c),expiration:a.options.expiration!=null?setTimeout(function(){return a.doExpire(l,m,d)},c+a.options.expiration):void 0,job:a}}_drainOne(r){return this._registerLock.schedule(()=>{var a,c,l,d,m;return this.queued()===0?this.Promise.resolve(null):(m=this._queues.getFirst(),{options:d,args:a}=l=m.first(),r!=null&&d.weight>r?this.Promise.resolve(null):(this.Events.trigger("debug","Draining ".concat(d.id),{args:a,options:d}),c=this._randomIndex(),this._store.__register__(c,d.weight,d.expiration).then(({success:b,wait:P,reservoir:k})=>{var x;return this.Events.trigger("debug","Drained ".concat(d.id),{success:b,args:a,options:d}),b?(m.shift(),x=this.empty(),x&&this.Events.trigger("empty"),k===0&&this.Events.trigger("depleted",x),this._run(c,l,P),this.Promise.resolve(d.weight)):this.Promise.resolve(null)})))})}_drainAll(r,a=0){return this._drainOne(r).then(c=>{var l;return c!=null?(l=r!=null?r-c:r,this._drainAll(l,a+c)):this.Promise.resolve(a)}).catch(c=>this.Events.trigger("error",c))}_dropAllQueued(r){return this._queues.shiftAll(function(a){return a.doDrop({message:r})})}stop(r={}){var a,c;return r=A.load(r,this.stopDefaults),c=l=>{var d;return d=()=>{var m;return m=this._states.counts,m[0]+m[1]+m[2]+m[3]===l},new this.Promise((m,b)=>d()?m():this.on("done",()=>{if(d())return this.removeAllListeners("done"),m()}))},a=r.dropWaitingJobs?(this._run=function(l,d){return d.doDrop({message:r.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var l,d,m;d=this._scheduled;for(l in d)m=d[l],this.jobStatus(m.job.options.id)==="RUNNING"&&(clearTimeout(m.timeout),clearTimeout(m.expiration),m.job.doDrop({message:r.dropErrorMessage}));return this._dropAllQueued(r.dropErrorMessage),c(0)}))):this.schedule({priority:Z-1,weight:0},()=>c(1)),this._receive=function(l){return l._reject(new h.prototype.BottleneckError(r.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new h.prototype.BottleneckError("stop() has already been called")),a}async _addToQueue(r){var a,c,l,d,m,b,P;({args:a,options:d}=r);try{({reachedHWM:m,blocked:c,strategy:P}=await this._store.__submit__(this.queued(),d.weight))}catch(k){return l=k,this.Events.trigger("debug","Could not queue ".concat(d.id),{args:a,options:d,error:l}),r.doDrop({error:l}),!1}return c?(r.doDrop(),!0):m&&(b=P===h.prototype.strategy.LEAK?this._queues.shiftLastFrom(d.priority):P===h.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(d.priority+1):P===h.prototype.strategy.OVERFLOW?r:void 0,b!=null&&b.doDrop(),b==null||P===h.prototype.strategy.OVERFLOW)?(b==null&&r.doDrop(),m):(r.doQueue(m,c),this._queues.push(r),await this._drainAll(),m)}_receive(r){return this._states.jobStatus(r.options.id)!=null?(r._reject(new h.prototype.BottleneckError("A job with the same id already exists (id=".concat(r.options.id,")"))),!1):(r.doReceive(),this._submitLock.schedule(this._addToQueue,r))}submit(...r){var a,c,l,d,m,b,P;return typeof r[0]=="function"?(m=r,[c,...r]=m,[a]=De.call(r,-1),d=A.load({},this.jobDefaults)):(b=r,[d,c,...r]=b,[a]=De.call(r,-1),d=A.load(d,this.jobDefaults)),P=(...k)=>new this.Promise(function(x,yr){return c(...k,function(...Le){return(Le[0]!=null?yr:x)(Le)})}),l=new X(P,r,d,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),l.promise.then(function(k){return typeof a=="function"?a(...k):void 0}).catch(function(k){return Array.isArray(k)?typeof a=="function"?a(...k):void 0:typeof a=="function"?a(k):void 0}),this._receive(l)}schedule(...r){var a,c,l;return typeof r[0]=="function"?([l,...r]=r,c={}):[c,l,...r]=r,a=new X(l,r,c,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(a),a.promise}wrap(r){var a,c;return a=this.schedule.bind(this),c=function(...l){return a(r.bind(this),...l)},c.withOptions=function(l,...d){return a(l,r,...d)},c}async updateSettings(r={}){return await this._store.__updateSettings__(A.overwrite(r,this.storeDefaults)),A.overwrite(r,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(r=0){return this._store.__incrementReservoir__(r)}}return h.default=h,h.Events=Y,h.version=h.prototype.version=wr.version,h.strategy=h.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},h.BottleneckError=h.prototype.BottleneckError=w,h.Group=h.prototype.Group=Tr,h.RedisConnection=h.prototype.RedisConnection=_e,h.IORedisConnection=h.prototype.IORedisConnection=Te,h.Batcher=h.prototype.Batcher=fr,h.prototype.jobDefaults={priority:Re,weight:1,expiration:null,id:"<no-id>"},h.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:h.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},h.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},h.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},h.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},h.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},h}).call(s);var Ce=Oe,vr=Ce;return vr})}(J)),J.exports}var Ut=Ft();const cr=Gr(Ut);var Dt="0.0.0-development";async function ur(e,t,s,o){if(!s.request||!s.request.request)throw s;if(s.status>=400&&!e.doNotRetry.includes(s.status)){const n=o.request.retries!=null?o.request.retries:e.retries,u=Math.pow((o.request.retryCount||0)+1,2);throw t.retry.retryRequest(s,n,u)}throw s}async function Ct(e,t,s,o){const n=new cr;return n.on("failed",function(u,p){const g=~~u.request.request.retries,E=~~u.request.request.retryAfter;if(o.request.retryCount=p.retryCount+1,g>p.retryCount)return E*e.retryAfterBaseValue}),n.schedule(Lt.bind(null,e,t,s),o)}async function Lt(e,t,s,o){const n=await s(s,o);if(n.data&&n.data.errors&&n.data.errors.length>0&&/Something went wrong while executing your query/.test(n.data.errors[0].message)){const u=new W(n.data.errors[0].message,500,{request:o,response:n});return ur(e,t,u,o)}return n}function lr(e,t){const s=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},t.retry);return s.enabled&&(e.hook.error("request",ur.bind(null,s,e)),e.hook.wrap("request",Ct.bind(null,s,e))),{retry:{retryRequest:(o,n,u)=>(o.request.request=Object.assign({},o.request.request,{retries:n,retryAfter:u}),o)}}}lr.VERSION=Dt;var It="0.0.0-development",oe=()=>Promise.resolve();function jt(e,t,s){return e.retryLimiter.schedule(qt,e,t,s)}async function qt(e,t,s){const o=s.method!=="GET"&&s.method!=="HEAD",{pathname:n}=new URL(s.url,"http://github.test"),u=s.method==="GET"&&n.startsWith("/search/"),p=n.startsWith("/graphql"),E=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(E.expiration=1e3*60),(o||p)&&await e.write.key(e.id).schedule(E,oe),o&&e.triggersNotification(n)&&await e.notifications.key(e.id).schedule(E,oe),u&&await e.search.key(e.id).schedule(E,oe);const T=e.global.key(e.id).schedule(E,t,s);if(p){const _=await T;if(_.data.errors!=null&&_.data.errors.some(f=>f.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:_,data:_.data})}return T}var $t=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function xt(e){const t=e.map(o=>o.split("/").map(n=>n.startsWith("{")?"(?:.+?)":n).join("/")),s="^(?:".concat(t.map(o=>"(?:".concat(o,")")).join("|"),")[^/]*$");return new RegExp(s,"i")}var Me=xt($t),pr=Me.test.bind(Me),j={},Bt=function(e,t){j.global=new e.Group({id:"octokit-global",maxConcurrent:10,...t}),j.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...t}),j.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...t}),j.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...t})};function pe(e,t){const{enabled:s=!0,Bottleneck:o=cr,id:n="no-id",timeout:u=1e3*60*2,connection:p}=t.throttle||{};if(!s)return{};const g={timeout:u};typeof p<"u"&&(g.connection=p),j.global==null&&Bt(o,g);const E=Object.assign({clustering:p!=null,triggersNotification:pr,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new o,id:n,...j},t.throttle);if(typeof E.onSecondaryRateLimit!="function"||typeof E.onRateLimit!="function")throw new Error("octokit/plugin-throttling error:\n        You must pass the onSecondaryRateLimit and onRateLimit error handlers.\n        See https://octokit.github.io/rest.js/#throttling\n\n        const octokit = new Octokit({\n          throttle: {\n            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},\n            onRateLimit: (retryAfter, options) => {/* ... */}\n          }\n        })\n    ");const T={},_=new o.Events(T);return T.on("secondary-limit",E.onSecondaryRateLimit),T.on("rate-limit",E.onRateLimit),T.on("error",f=>e.log.warn("Error in throttling-plugin limit handler",f)),E.retryLimiter.on("failed",async function(f,S){const[G,U,O]=S.args,{pathname:w}=new URL(O.url,"http://github.test");if(!(w.startsWith("/graphql")&&f.status!==401||f.status===403||f.status===429))return;const R=~~U.retryCount;U.retryCount=R,O.request.retryCount=R;const{wantRetry:N,retryAfter:q=0}=await async function(){var $,M;if(/\bsecondary rate\b/i.test(f.message)){const F=Number(f.response.headers["retry-after"])||G.fallbackSecondaryRateRetryAfter;return{wantRetry:await _.trigger("secondary-limit",F,O,e,R),retryAfter:F}}if(f.response.headers!=null&&f.response.headers["x-ratelimit-remaining"]==="0"||((M=($=f.response.data)==null?void 0:$.errors)!=null?M:[]).some(F=>F.type==="RATE_LIMITED")){const F=new Date(~~f.response.headers["x-ratelimit-reset"]*1e3).getTime(),C=Math.max(Math.ceil((F-Date.now())/1e3)+1,0);return{wantRetry:await _.trigger("rate-limit",C,O,e,R),retryAfter:C}}return{}}();if(N)return U.retryCount++,q*G.retryAfterBaseValue}),e.hook.wrap("request",jt.bind(null,E)),{}}pe.VERSION=It;pe.triggersNotification=pr;var Wt="7.1.3";Ze.defaults({userAgent:"octokit-oauth-app.js/".concat(Wt," ").concat(V())});var Ht="0.0.0-development",ss=Ze.plugin(ar,tr,yt,lr,pe).defaults({userAgent:"octokit.js/".concat(Ht),throttle:{onRateLimit:Vt,onSecondaryRateLimit:Nt}});function Vt(e,t,s){if(s.log.warn("Request quota exhausted for request ".concat(t.method," ").concat(t.url)),t.request.retryCount===0)return s.log.info("Retrying after ".concat(e," seconds!")),!0}function Nt(e,t,s){if(s.log.warn("SecondaryRateLimit detected for request ".concat(t.method," ").concat(t.url)),t.request.retryCount===0)return s.log.info("Retrying after ".concat(e," seconds!")),!0}export{ss as O};
